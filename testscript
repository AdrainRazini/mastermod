-- Obter o jogador e seu personagem
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local camera = game.Workspace.CurrentCamera
local primaryPart = character.PrimaryPart

-- Variável para controlar o voo
local flying = false

-- Criar e configurar BodyVelocity e BodyGyro uma vez
local bodyVelocity = Instance.new("BodyVelocity")
bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
bodyVelocity.Velocity = Vector3.new()
bodyVelocity.P = 10000
bodyVelocity.Parent = primaryPart

local bodyGyro = Instance.new("BodyGyro")
bodyGyro.MaxTorque = Vector3.new(4000, 4000, 4000)
bodyGyro.CFrame = primaryPart.CFrame
bodyGyro.P = 3000
bodyGyro.Parent = primaryPart

-- Função para aplicar movimento para frente, controle de altura e estabilizar o voo
local function applyMovement()
    local moveDirection = Vector3.new(0, 0, 0)
    
    -- Controle via teclas W, A, S, D
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
        moveDirection = moveDirection + camera.CFrame.LookVector
    end
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
        moveDirection = moveDirection - camera.CFrame.LookVector
    end
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
        moveDirection = moveDirection - camera.CFrame.RightVector
    end
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
        moveDirection = moveDirection + camera.CFrame.RightVector
    end
    
    -- Aplica a velocidade e direção de movimento
    bodyVelocity.Velocity = moveDirection.Unit * 100  -- Ajuste a velocidade conforme necessário
    
    -- Controla a altura com o espaço (subir) e Ctrl (descer)
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then
        bodyVelocity.Velocity = bodyVelocity.Velocity + Vector3.new(0, 50, 0)  -- Subir
    elseif game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then
        bodyVelocity.Velocity = bodyVelocity.Velocity + Vector3.new(0, -50, 0)  -- Descer
    end

    -- Aplica estabilização para manter o voo estável
    bodyGyro.CFrame = CFrame.new(primaryPart.Position, primaryPart.Position + camera.CFrame.LookVector)
end

-- Função para iniciar o voo
local function startFlying()
    if humanoid:GetState() == Enum.HumanoidStateType.Seated then
        return
    end
    if not flying then
        flying = true
        bodyVelocity.Velocity = Vector3.new()  -- Zera a velocidade ao começar a voar
        bodyGyro.CFrame = primaryPart.CFrame  -- Define a rotação inicial
        
        -- Loop de voo contínuo
        while flying do
            applyMovement()
            wait(0.1) -- Ajuste o intervalo conforme necessário
        end
    end
end

-- Função para parar de voar
local function stopFlying()
    flying = false
    bodyVelocity.Velocity = Vector3.new()  -- Zera a velocidade
    bodyGyro.CFrame = primaryPart.CFrame  -- Reseta a rotação
end

-- Função para detectar a solicitação de pulo e iniciar o voo
humanoid.Jumping:Connect(function()
    startFlying()
end)

-- Detecção de quando o personagem aterrissa e parar o voo
humanoid.Landed:Connect(function()
    stopFlying()
end)

-- Se o personagem já estiver no chão ao entrar, iniciar o voo
if humanoid:GetState() ~= Enum.HumanoidStateType.Seated then
    startFlying()
end
