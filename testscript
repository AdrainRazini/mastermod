local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoide = character:WaitForChild("Humanoid")
local camera = game.Workspace.CurrentCamera
local flying = false
local speed = 50  -- Velocidade de voo
local jumpHeight = 0.2  -- Altura de salto ao começar o voo

-- Função para começar o voo
local function startFlying()
    flying = true
    humanoide.PlatformStand = true
    humanoide:ChangeState(Enum.HumanoidStateType.Physics)
    humanoide.WalkSpeed = 0  -- Desabilita a velocidade de caminhada

    -- Define a posição inicial do voo
    character:WaitForChild("HumanoidRootPart").Anchored = true
end

-- Função para parar o voo
local function stopFlying()
    flying = false
    humanoide.PlatformStand = false
    humanoide:ChangeState(Enum.HumanoidStateType.GettingUp)
    humanoide.WalkSpeed = 16  -- Retorna a velocidade de caminhada

    -- Deixa o personagem voltar ao chão
    character:WaitForChild("HumanoidRootPart").Anchored = false
end

-- Detecta se o jogador está no chão
local function isGrounded()
    return humanoide:GetState() == Enum.HumanoidStateType.Physics or humanoide:GetState() == Enum.HumanoidStateType.Seated
end

-- Função para mover o jogador enquanto voa
local function moveFlying()
    local hrp = character:WaitForChild("HumanoidRootPart")
    local direction = Vector3.new()

    if flying then
        -- Controle via teclado (W, A, S, D)
        local moveDirection = Vector3.new(0, 0, 0)
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection + camera.CFrame.LookVector
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection - camera.CFrame.LookVector
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - camera.CFrame.RightVector
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + camera.CFrame.RightVector
        end

        -- Adiciona direção do movimento
        direction = moveDirection.Unit * speed
        hrp.Velocity = Vector3.new(direction.X, hrp.Velocity.Y, direction.Z)  -- Mantém a altura constante

        -- Controle de altura (subir/descer)
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then
            hrp.Velocity = Vector3.new(hrp.Velocity.X, jumpHeight * speed, hrp.Velocity.Z)  -- Subir
        elseif game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then
            hrp.Velocity = Vector3.new(hrp.Velocity.X, -jumpHeight * speed, hrp.Velocity.Z)  -- Descer
        end
    end
end

-- Detecta se o jogador está pressionando o botão de "pular"
game:GetService("UserInputService").JumpRequest:Connect(function()
    if not flying and isGrounded() then
        startFlying()
    end
end)

-- Ação para parar de voar se o jogador tocar o chão
humanoide.FreeFalling:Connect(function()
    if flying then
        stopFlying()
    end
end)

-- Controle de movimento enquanto voa
game:GetService("RunService").Heartbeat:Connect(function()
    moveFlying()
end)

-- Quando o personagem é adicionado ao jogo, verificamos se ele já está no chão
player.CharacterAdded:Connect(function()
    character = player.Character or player.CharacterAdded:Wait()
    humanoide = character:WaitForChild("Humanoid")
end)
